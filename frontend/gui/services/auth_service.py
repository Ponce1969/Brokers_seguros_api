"""
Servicio para manejar la autenticaci√≥n de usuarios usando QNetworkAccessManager
"""

import logging
from typing import Optional
from PyQt6.QtCore import QObject, pyqtSignal
from .network_manager import NetworkManager

# Configurar logging
logger = logging.getLogger(__name__)


class AuthService(QObject):
    """
    Clase para manejar la autenticaci√≥n y gesti√≥n de sesiones de usuario
    """

    # Se√±ales
    auth_success = pyqtSignal(
        dict
    )  # Emite los datos del token cuando la autenticaci√≥n es exitosa
    auth_error = pyqtSignal(str)  # Emite mensaje de error cuando la autenticaci√≥n falla
    session_expired = pyqtSignal()  # Emite cuando la sesi√≥n ha expirado

    def __init__(self):
        """
        Inicializa el servicio de autenticaci√≥n
        """
        super().__init__()
        self.api = NetworkManager("http://localhost:8000")
        self.api.response_received.connect(self._handle_response)
        self.api.error_occurred.connect(self._handle_error)
        self.api.token_expired.connect(self.session_expired.emit)
        self._current_operation = None

    def _handle_response(self, response):
        """Maneja las respuestas del servidor"""
        try:
            if self._current_operation == "login":
                if isinstance(response, dict) and "access_token" in response:
                    logger.info("‚úÖ Usuario autenticado con √©xito")
                    self.api.set_token(response["access_token"])
                    self.auth_success.emit(response)
                else:
                    logger.error("‚ùå Error: Respuesta inv√°lida del servidor")
                    self.auth_error.emit("Error de autenticaci√≥n: Respuesta inv√°lida")
            elif self._current_operation == "verify":
                logger.debug("‚úÖ Sesi√≥n v√°lida")
                self.auth_success.emit(response if isinstance(response, dict) else {})
        except Exception as e:
            logger.error(f"‚ùå Error procesando respuesta: {e}")
            self.auth_error.emit(str(e))
        finally:
            self._current_operation = None

    def _handle_error(self, error_msg: str):
        """Maneja los errores de las peticiones"""
        logger.error(f"‚ùå Error en operaci√≥n {self._current_operation}: {error_msg}")

        if "Email o contrase√±a incorrectos" in error_msg:
            self.auth_error.emit("Email o contrase√±a incorrectos")
        elif "Usuario inactivo" in error_msg:
            self.auth_error.emit("El usuario est√° inactivo")
        else:
            self.auth_error.emit(f"Error de autenticaci√≥n: {error_msg}")

    def login(self, email: str, password: str) -> None:
        """
        Autenticar usuario con email y contrase√±a

        Args:
            email: Correo electr√≥nico del usuario
            password: Contrase√±a del usuario
        """
        try:
            logger.info(f"üîë Intentando login para usuario: {email}")
            self._current_operation = "login"

            # Preparar datos para la petici√≥n
            login_data = {"username": email, "password": password}

            # Realizar petici√≥n de login
            self.api.post("api/v1/login/access-token", login_data)

        except Exception as e:
            logger.error(f"‚ùå Error inesperado en login: {str(e)}")
            self.auth_error.emit("Error inesperado al autenticar")

    def logout(self) -> None:
        """
        Cierra la sesi√≥n del usuario actual
        """
        try:
            self.api.set_token(None)
            logger.info("üëã Sesi√≥n cerrada correctamente")
        except Exception as e:
            logger.error(f"‚ùå Error al cerrar sesi√≥n: {str(e)}")
            self.auth_error.emit("Error al cerrar la sesi√≥n")

    def verificar_sesion(self) -> None:
        """
        Verifica si la sesi√≥n actual es v√°lida
        """
        try:
            self._current_operation = "verify"
            self.api.get("api/v1/usuarios/me")
        except Exception as e:
            logger.error(f"‚ùå Error al verificar sesi√≥n: {str(e)}")
            self.auth_error.emit("Error al verificar la sesi√≥n")

    def get_token(self) -> Optional[str]:
        """
        Obtiene el token actual

        Returns:
            Optional[str]: Token actual o None si no hay sesi√≥n
        """
        return self.api.token
